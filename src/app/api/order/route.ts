import process from 'process';

import { Bot } from 'grammy';
import type { NextRequest } from 'next/server';
import { NextResponse } from 'next/server';

import escapeMessage from '@/src/shared/lib/escape-message';

// –¢–æ–∫–µ–Ω –±–æ—Ç–∞
const token = process.env.NEXT_PUBLIC_TELEGRAM_BOT_TOKEN;

if (!token) {
  throw new Error('TELEGRAM_BOT_TOKEN environment variable not found.');
}

const bot = new Bot(token);
const adminChatId = process.env.NEXT_PUBLIC_TELEGRAM_CHATID; // ID –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π

if (!adminChatId) {
  throw new Error('TELEGRAM_CHATID environment variable not found.');
}

export const POST = async (req: NextRequest): Promise<NextResponse> => {
  try {
    const data = await req.json();

    if (!data) {
      return new NextResponse('Bad Request', { status: 400 });
    }

    const {
      name,
      phone,
      email,
      nameProd,
      descriptionProd,
      allDescriptionProd,
      priceProd,
      link,
    } = data;

    const formattedMessage = `
üåüüåüüåü *–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –∑–∞–∫–∞–∑* üåüüåüüåü

üë§ *–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞:*  ${name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
üìû *–¢–µ–ª–µ—Ñ–æ–Ω:* ${phone || '–ù–µ —É–∫–∞–∑–∞–Ω'}
üìß *Email:* ${email || '–ù–µ —É–∫–∞–∑–∞–Ω'}

üõí *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–µ:*
   ‚ñ™Ô∏è *–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ:* ${nameProd || '–¢–æ–≤–∞—Ä –Ω–µ –≤—ã–±—Ä–∞–Ω'}
   ‚ñ™Ô∏è *–û–ø–∏—Å–∞–Ω–∏–µ:* ${descriptionProd || '–¢–æ–≤–∞—Ä –Ω–µ –≤—ã–±—Ä–∞–Ω'}
   ‚ñ™Ô∏è *–ü–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:* ${allDescriptionProd || '–¢–æ–≤–∞—Ä –Ω–µ –≤—ã–±—Ä–∞–Ω'}
   ‚ñ™Ô∏è *–°—Ç–æ–∏–º–æ—Å—Ç—å:* ${priceProd || '–¢–æ–≤–∞—Ä –Ω–µ –≤—ã–±—Ä–∞–Ω'}
   ‚ñ™Ô∏è *–°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä:* ${link || '–¢–æ–≤–∞—Ä –Ω–µ –≤—ã–±—Ä–∞–Ω'}
`;

    await bot.api.sendMessage(adminChatId, escapeMessage(formattedMessage), {
      parse_mode: 'MarkdownV2',
    });

    return new NextResponse('OK', { status: 200 });
  } catch {
    return new NextResponse('Internal Server Error', { status: 500 });
  }
};
